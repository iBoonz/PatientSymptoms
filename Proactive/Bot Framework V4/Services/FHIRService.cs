using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Hl7.Fhir.Rest;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Clients.ActiveDirectory;
using ProactiveBot.Models;

namespace ProactiveBot.Services
{
    public class FHIRService : IFHIRService
    {
        private IConfiguration _configuration;

        public FHIRService(IConfiguration configuration)
        {
            _configuration = configuration;
        }
        public async Task SendDataToFHIRServer(PatientSymptomInfoDto patientSymptoms)
        {
            var accessToken = await GetS2SAccessToken(_configuration["Authentication:Microsoft:Resource"], _configuration["Authentication:Microsoft:ClientId"],
                _configuration["Authentication:Microsoft:ClientSecret"]);
            var client = GetClient(accessToken.AccessToken);
            var existingPatient = client.Search<Hl7.Fhir.Model.Patient>(new string[] { $"identifier=http://hl7.org/fhir/sid/eu-ssn|{patientSymptoms.Identifier}" });
            var patient = new Hl7.Fhir.Model.Patient();
            if (existingPatient.Entry.Count == 1)
            {
                var patientResult = client.Search<Hl7.Fhir.Model.Patient>(new string[] { $"_id={existingPatient.Entry[0].Resource.Id}" });
                if ((patientResult.Entry != null) && (patientResult.Entry.Count > 0))
                {
                    patient = (Hl7.Fhir.Model.Patient)patientResult.Entry[0].Resource;
                }
            }
            else
            {
                var newPatient = new Hl7.Fhir.Model.Patient()
                {
                    BirthDate = patientSymptoms.PatientDob,
                    Name = new List<Hl7.Fhir.Model.HumanName>()
                    {
                       new Hl7.Fhir.Model.HumanName()
                       {
                           Given = new List<string>(){patientSymptoms.PatientName },
                           Use = Hl7.Fhir.Model.HumanName.NameUse.Official,
                       }
                    },
                    Identifier = new List<Hl7.Fhir.Model.Identifier>()
                    {
                        new Hl7.Fhir.Model.Identifier()
                        {
                            Type = new Hl7.Fhir.Model.CodeableConcept
                            {
                                Coding = new List<Hl7.Fhir.Model.Coding>
                                {
                                    new Hl7.Fhir.Model.Coding
                                    {
                                        System = "http://hl7.org/fhir/identifier-type",
                                        Code = "SB",
                                        Display = "Social Security Number"
                                    },
                                },
                                Text = "Social Security Number",
                            },
                            System = "http://hl7.org/fhir/sid/eu-ssn",
                            Value = patientSymptoms.Identifier
                        }
                    }
                };

                patient = client.Create<Hl7.Fhir.Model.Patient>(newPatient);
            }

            var appointment = new Hl7.Fhir.Model.Appointment()
            {
                CreatedElement = new Hl7.Fhir.Model.FhirDateTime(new DateTimeOffset()),
                Meta = new Hl7.Fhir.Model.Meta { Source = "Generated by Patient"},
                Description = patientSymptoms.Symptoms,
                Status = Hl7.Fhir.Model.Appointment.AppointmentStatus.CheckedIn,
                ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(),
                Participant = new List<Hl7.Fhir.Model.Appointment.ParticipantComponent>
                {
                    new Hl7.Fhir.Model.Appointment.ParticipantComponent
                    {
                        Actor = new Hl7.Fhir.Model.ResourceReference
                        {
                            Reference = $"#{patient.Id}"
                        }
                    }
                }
            };

            if (!string.IsNullOrWhiteSpace(patientSymptoms.MedicationMention))
            {
                appointment.ReasonCode.Add(new Hl7.Fhir.Model.CodeableConcept { 
                    Text = patientSymptoms.MedicationMention,
                    Coding = new List<Hl7.Fhir.Model.Coding>
                    {
                        new Hl7.Fhir.Model.Coding
                        {
                            Code = "MedicationMention", 
                            Display = patientSymptoms.MedicationMention
                        }
                    }
                });
            }
            if (!string.IsNullOrWhiteSpace(patientSymptoms.SignSymptomMention))
            {
                appointment.ReasonCode.Add(new Hl7.Fhir.Model.CodeableConcept { 
                    Text = patientSymptoms.SignSymptomMention,
                    Coding = new List<Hl7.Fhir.Model.Coding>
                    {
                        new Hl7.Fhir.Model.Coding
                        {
                            Code = "SignSymptomMention",
                            Display = patientSymptoms.SignSymptomMention
                        }
                    }
                });
            }
            if (!string.IsNullOrWhiteSpace(patientSymptoms.DiseaseDisorderMention))
            {
                appointment.ReasonCode.Add(new Hl7.Fhir.Model.CodeableConcept { 
                    Text = patientSymptoms.DiseaseDisorderMention,
                    Coding = new List<Hl7.Fhir.Model.Coding>
                    {
                        new Hl7.Fhir.Model.Coding
                        {
                            Code = "DiseaseDisorderMention",
                            Display = patientSymptoms.DiseaseDisorderMention
                        }
                    }
                });
            }
            if (!string.IsNullOrWhiteSpace(patientSymptoms.AnatomicalSiteMention))
            {
                appointment.ReasonCode.Add(new Hl7.Fhir.Model.CodeableConcept { 
                    Text = patientSymptoms.AnatomicalSiteMention,
                    Coding = new List<Hl7.Fhir.Model.Coding>
                    {
                        new Hl7.Fhir.Model.Coding
                        {
                            Code = "AnatomicalSiteMention",
                            Display = patientSymptoms.AnatomicalSiteMention
                        }
                    }
                });
            }

            client.Create<Hl7.Fhir.Model.Appointment>(appointment);
        }

        private FhirClient GetClient(string accessToken)
        {
            var client = new Hl7.Fhir.Rest.FhirClient(_configuration["Authentication:Microsoft:Resource"]);
            client.OnBeforeRequest += (object sender, BeforeRequestEventArgs e) =>
            {
                e.RawRequest.Headers.Add("Authorization", $"Bearer {accessToken}");
            };
            client.PreferredFormat = ResourceFormat.Json;
            return client;
        }

        static async Task<AuthenticationResult> GetS2SAccessToken(string resource, string clientId, string clientSecret)
        {
            string authorityUri = "";
            var clientCredential = new ClientCredential(clientId, clientSecret);
            AuthenticationContext context = new AuthenticationContext(authorityUri, false);
            AuthenticationResult authenticationResult = await context.AcquireTokenAsync(
                resource, 
                clientCredential); 
            return authenticationResult;
        }
    }
}
